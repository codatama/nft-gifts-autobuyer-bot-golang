package autobuy

import (
	"context"

	"gopkg.in/telebot.v4"

	"fmt"
	"log"
	"strings"

	"prvbot/internal/db"
	"prvbot/internal/userstates"
)

func HandleChannelSettings(c telebot.Context) error {
	chatID := c.Sender().ID
	ctx := context.Background()

	channels, err := db.GetOrCreatePurchaseChannels(ctx, chatID)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:", err)
		return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–∞–ª–æ–≤.")
	}

	text := "*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤*\n\n"
	text += fmt.Sprintf("‚ñ™Ô∏è –ö–∞–Ω–∞–ª 1: %s\n", emptyOrValue(channels.Channel1))
	text += fmt.Sprintf("‚ñ™Ô∏è –ö–∞–Ω–∞–ª 2: %s\n", emptyOrValue(channels.Channel2))
	text += fmt.Sprintf("‚ñ™Ô∏è –ö–∞–Ω–∞–ª 3: %s\n", emptyOrValue(channels.Channel3))

	text += "\n–í–ù–ò–ú–ê–ù–ò–ï!\n"
	text += "–ö–∞–Ω–∞–ª 1 –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–¥–∞—Ä–∫–∏ —Å —Å–∞–ø–ø–ª–∞–µ–º –Ω–µ –≤—ã—à–µ 15 —Ç—ã—Å—è—á\n"
	text += "–ö–∞–Ω–∞–ª 2 ‚Äî –Ω–µ –≤—ã—à–µ 50 —Ç—ã—Å—è—á\n"
	text += "–ö–∞–Ω–∞–ª 3 ‚Äî —Å–≤—ã—à–µ 50 —Ç—ã—Å—è—á\n\n"
	text += "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ª—é–±–æ–π –ø–æ–¥–∞—Ä–æ–∫ –º–æ–≥ –±—ã—Ç—å –∫—É–ø–ª–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª ‚Äî —É–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö."


	menu := &telebot.ReplyMarkup{}
	btnAdd := menu.Data("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "add_channel")
	btnBack := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", BtnGoBackToAutoBuyMenu.Unique)
	menu.Inline(menu.Row(btnAdd), menu.Row(btnBack))

	return c.Edit(text, &telebot.SendOptions{
		ParseMode:   telebot.ModeMarkdown,
		ReplyMarkup: menu,
	})
}

func emptyOrValue(s string) string {
	if strings.TrimSpace(s) == "" {
		return "_–ö–∞–Ω–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω_"
	}
	return s
}

func HandleAddChannelStepOne(c telebot.Context) error {
	text := "üì° –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"

	menu := &telebot.ReplyMarkup{}
	btn1 := menu.Data("1Ô∏è‚É£", "channel:edit1")
	btn2 := menu.Data("2Ô∏è‚É£", "channel:edit2")
	btn3 := menu.Data("3Ô∏è‚É£", "channel:edit3")
	btnb := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", BtnGoBackToAutoBuyMenu.Unique)
	menu.Inline(menu.Row(btn1, btn2, btn3),
	menu.Row(btnb))
	

	return c.Edit(text, &telebot.SendOptions{
		ReplyMarkup: menu,
	})
}

func PromptChannelInput(c telebot.Context, field string) error {
	chatID := c.Chat().ID

	ctx := context.Background()
	channels, err := db.GetOrCreatePurchaseChannels(ctx, chatID)
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã: %v", err)
		return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–∞–ª–æ–≤.")
	}

	switch field {
	case "channel2":
		if strings.TrimSpace(channels.Channel1) == "" {
			return c.Send("‚ö†Ô∏è –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–∞–Ω–∞–ª–∞ 1. –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ.")
		}
	case "channel3":
		if strings.TrimSpace(channels.Channel2) == "" {
			return c.Send("‚ö†Ô∏è –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–∞–Ω–∞–ª–∞ 2. –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ.")
		}
	}

	switch field {
	case "channel1":
		userstates.Set(chatID, "awaiting_channel_1")
	case "channel2":
		userstates.Set(chatID, "awaiting_channel_2")
	case "channel3":
		userstates.Set(chatID, "awaiting_channel_3")
	}

	return c.Send("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `@channelname`:", &telebot.SendOptions{
		ParseMode: telebot.ModeMarkdown,
	})
}

func HandleChannelNameInput(c telebot.Context) error {
	chatID := c.Chat().ID
	state := userstates.Get(chatID)
	userstates.Clear(chatID)

	field := map[string]string{
		"awaiting_channel_1": "channel1",
		"awaiting_channel_2": "channel2",
		"awaiting_channel_3": "channel3",
	}[state]

	if field == "" {
		return nil
	}

	channelName := strings.TrimSpace(c.Text())
	if !strings.HasPrefix(channelName, "@") {
		return c.Send("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `@`. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}

	err := db.UpdateChannelField(chatID, field, channelName)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", err)
		return c.Send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–Ω–∞–ª.")
	}

	return c.Send(fmt.Sprintf("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω %s: %s", field, channelName))
}